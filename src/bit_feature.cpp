#include "bit_feature.h"
#include <opencv/cv.h>	
#include <opencv/highgui.h>

namespace {
	const int order_pairs32[32][2] = {
		 0,35, 35,30, 30,29, 29,24,
		24,23, 23,18, 18,17, 17,12,
		12,11, 11, 6,  6, 5,  5,34,
		34, 4,  4,33, 33, 3,  3,32,
		32, 2,  2,31, 31, 1,  1,28,
		28,25, 25,22, 22,19, 19,16,
		16,13, 13,10, 10,27, 27, 9,
		 9,26,  8,21,  7,20, 15,14
	};
	
	const int order_pairs128[128][2] = {
		12,1,   1, 9,  9,24, 24, 0,   0,27, 27,25, 25,31, 31,29, 
		29,15, 15,18, 18,28, 28,32,  32,13, 13,23, 23,33, 33,26, 
		26, 3,  3,20, 20,17, 17, 8,   8,19, 19,22, 22,34, 34,30, 
		30, 7,  7, 6,  6,11, 11, 5,   5, 4,  4, 2,  2,21, 21,14, 
		14,35, 35,10, 10,16, 16,12,  12, 9,  1,24,  9, 0, 24,27, 
		 0,25, 27,31, 25,29, 31,15,  29,18, 15,28, 18,32, 28,13, 
		32,23, 13,33, 23,26, 33, 3,  26,20,  3,17, 20, 8, 17,19, 
		 8,22, 19,34, 22,30, 34, 7,  30, 6,  7,11,  6, 5, 11, 4,
		 5, 2,  4,21,  2,14, 21,35,  14,10, 35,16, 10,12, 16, 1, 
		12,24,  1, 0,  9,27, 24,25,   0,31, 27,29, 25,15, 31,18, 
		29,28, 15,32, 18,13, 28,23,  32,33, 13,26, 23, 3, 33,20, 
		26,17,  3, 8, 20,19, 17,22,   8,34, 19,30, 22, 7, 34, 6, 
		30,11,  7, 5,  6, 4, 11, 2,   5,21,  4,14,  2,35, 21,10, 
		14,16, 35,12, 10, 1, 16, 9,  12, 0,  1,27,  9,25, 24,31, 
		 0,29, 27,15, 25,18, 31,28,  29,32, 15,13, 18,23, 28,33, 
		32,26, 13, 3, 23,20, 33,17,  26, 8,  3,19, 20,22, 17,34
	};
	
	char dist_table[256] = {
		0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4,
		1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5,
		1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5,
		2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6,
		1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5,
		2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6,
		2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6,
		3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7,
		1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5,
		2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6,
		2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6,
		3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7,
		2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6,
		3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7,
		3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7,
		4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8,
	};


}	// local namespace


BitFeature order_feature(int nbits, const GrayImage& gimg) {
	ASSERTSD(nbits ==32 || nbits == 64 || nbits == 128);
	static const int NG = 6; 
	int bgray[NG * NG];
	IntImage iimg(gimg);
	int bw = iimg.width() / NG;
	int bh = iimg.height() / NG;

	for (int k = 0, i = 0; i < NG; ++i)
		for (int j = 0; j < NG; ++j, ++k)
			bgray[k] = iimg.BoxIntegral(i*bh, j*bw, bh, bw);

	BitFeature v(nbits);
	const int (*p)[2] = nbits == 32 ? order_pairs32 : order_pairs128;
	for (int k = 0, i = 0; i < v.nbytes(); ++i) {
		BitFeature::Byte bit = 1;
		for (int j = 0; j < 8; ++j, ++k, bit <<= 1)
			if (bgray[p[k][0]] > bgray[p[k][1]])
				v.bytes[i] |= bit;
	}
	return v;
}

BitFeature order_feature(int nbits, const IplImage* img) {
	return order_feature(nbits, GrayImage(img));
}

int hamming_distance(const BitFeature& f1, const BitFeature& f2) {
	BitFeature f = f1 ^ f2;
	int dist = 0;
	for (int i = 0; i < f.nbytes(); ++i)
		dist += dist_table[f.bytes[i]];

	return dist;
}
